rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // ðŸ”’ SECURITY: App Check validation - temporarily disabled for testing
    function isAppCheckValid() {
      // Temporarily allow all requests for testing
      // TODO: Re-enable App Check validation for production
      return true;
    }

    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "admin";
    }

    // Helper function to check if a user is modifying only the responders array
    function isOnlyModifyingResponders(oldData, newData) {
      // Check if all fields are unchanged except the 'responders' field
      return oldData.diff(newData).affectedKeys().hasOnly(['responders']);
    }

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isValidUser() {
      return isAuthenticated() &&
             request.auth.token.email_verified == true;
    }

    function isOwnerOrEmailVerified(userId) {
      return isOwner(userId) ||
             (isAuthenticated() && request.auth.token.email_verified == true);
    }

    // ðŸ”’ SECURITY: Rate limiting check
    function isWithinRateLimit() {
      return request.time > resource.data.lastRequestTime + duration.value(1, 's');
    }

    // Requests collection - FIXED to allow accepting requests and closing requests
    match /requests/{requestId} {
      // Anyone authenticated with valid App Check can read requests
      allow read: if isAuthenticated() && isAppCheckValid();
      
      // Anyone authenticated with valid App Check can create requests
      allow create: if isAuthenticated() && isAppCheckValid();
      
      // Allow updates in these cases:
      // 1. User is the requester (can close their own requests)
      // 2. User is accepting the request (modifying responders array)
      // 3. User is admin
      allow update: if isAuthenticated() && isAppCheckValid() && (
        request.auth.uid == resource.data.requesterId || 
        isAdmin() ||
        (
          // This handles accepting requests by updating the responders array
          request.resource.data.responders is list && 
          (resource.data.responders == null || resource.data.responders is list)
        )
      );
      
      // Only requester or admin can delete
      allow delete: if isAuthenticated() && isAppCheckValid() && 
                    (request.auth.uid == resource.data.requesterId || isAdmin());
    }
    
    // Users collection:
    // Rules for user profiles, where userId in the path matches the authenticated user's UID.
    match /users/{userId} {
      allow read: if isAuthenticated() && isAppCheckValid();
      allow create: if isAuthenticated() && isAppCheckValid() && isOwner(userId) && request.auth.token.email_verified == true;
      allow update: if isAuthenticated() && isAppCheckValid() && isOwner(userId);
      allow delete: if isOwner(userId) && isAppCheckValid();
    }

    // Donations collection:
    // NOW uses 'userId' to match your Flutter code
    match /donations/{donationId} {
      allow read: if isAuthenticated() && isAppCheckValid();
      allow create: if isAuthenticated() && isAppCheckValid();
      allow update: if isAuthenticated() && isAppCheckValid() && isOwner(resource.data.userId);
      allow delete: if isAuthenticated() && isAppCheckValid() && isOwner(resource.data.userId);
    }

    // Notifications collection - FIXED permissions
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && isAppCheckValid() && isOwner(resource.data.userId);
      allow create: if isAuthenticated() && isAppCheckValid();
      allow update: if isAuthenticated() && isAppCheckValid() && isOwner(resource.data.userId);
      allow delete: if isAuthenticated() && isAppCheckValid() && isOwner(resource.data.userId);
    }

    // Health data collection - FIXED to use correct path structure
    match /healthData/{userId} {
      allow read, write: if isAuthenticated() && isAppCheckValid() && isOwner(userId);
    }

    // User settings collection:
    match /user_settings/{userId} {
      allow read, write: if isAuthenticated() && isAppCheckValid() && isOwner(userId);
    }

    // User settings collection (camelCase version):
    match /userSettings/{userId} {
      allow read, write: if isAuthenticated() && isAppCheckValid() && isOwner(userId);
    }

    // Device tokens collection:
    match /device_tokens/{userId} {
      allow read, write: if isAuthenticated() && isAppCheckValid() && isOwner(userId);
    }

    // Device tokens collection (camelCase version):
    match /deviceTokens/{userId} {
      allow read, write: if isAuthenticated() && isAppCheckValid() && isOwner(userId);
    }

    // FCM tokens collection (common for push notifications)
    match /fcm_tokens/{userId} {
      allow read, write: if isAuthenticated() && isAppCheckValid() && isOwner(userId);
    }

    // Encryption keys collection
    match /encryptionKeys/{userId} {
      allow read: if isAuthenticated() && isAppCheckValid();
      allow write: if isOwner(userId) && isAppCheckValid();
    }
    match /encryption_keys/{userId} {
      allow read: if isAuthenticated() && isAppCheckValid();
      allow write: if isOwner(userId) && isAppCheckValid();
    }

    // ðŸ”’ SECURITY: Security audit logs - admin only
    match /security_audit_logs/{logId} {
      allow read: if isAuthenticated() && isAppCheckValid() && isAdmin();
      allow create: if isAuthenticated() && isAppCheckValid();
      allow update, delete: if false; // Immutable logs
    }

    // ðŸ”’ ADMIN: Security events collection - admin only
    match /security_events/{eventId} {
      allow read: if isAuthenticated() && isAppCheckValid() && isAdmin();
      allow create: if isAuthenticated() && isAppCheckValid();
      allow update, delete: if false; // Immutable events
    }

    // ðŸ”’ ADMIN: Admin audit logs collection - admin only
    match /admin_audit_logs/{logId} {
      allow read: if isAuthenticated() && isAppCheckValid() && isAdmin();
      allow create: if isAuthenticated() && isAppCheckValid() && isAdmin();
      allow update, delete: if false; // Immutable logs
    }

    // ðŸ”’ ADMIN: System statistics collection - admin only
    match /system_statistics/{statId} {
      allow read: if isAuthenticated() && isAppCheckValid() && isAdmin();
      allow create: if isAuthenticated() && isAppCheckValid() && isAdmin();
      allow update: if isAuthenticated() && isAppCheckValid() && isAdmin();
      allow delete: if false; // Prevent deletion
    }

    // Bug reports collection:
    // NOW uses 'user_id' to match your Flutter code
    match /bug_reports/{reportId} {
      allow read: if isAuthenticated() && isAppCheckValid();
      allow create: if isAuthenticated() && isAppCheckValid();
      allow update: if isAuthenticated() && isAppCheckValid() && isOwner(resource.data.user_id); // Allow owner to update their own report
      allow delete: if isAuthenticated() && isAppCheckValid() && isOwner(resource.data.user_id); // Allow owner to delete their own report
    }

    // Bug reports collection (camelCase version):
    match /bugReports/{reportId} {
      allow read: if isAuthenticated() && isAppCheckValid();
      allow create: if isAuthenticated() && isAppCheckValid();
      allow update: if isAuthenticated() && isAppCheckValid() && isOwner(resource.data.user_id); // Allow owner to update their own report
      allow delete: if isAuthenticated() && isAppCheckValid() && isOwner(resource.data.user_id); // Allow owner to delete their own report
    }

    // FAQs collection:
    match /faqs/{faqId} {
      allow read: if true; // Public read access for everyone
      allow write: if false; // Only admins can write/update FAQs
    }

    // Test notifications collection (for debugging/testing)
    match /test_notifications/{testId} {
      allow read, write: if isAuthenticated() && isAppCheckValid();
    }

    // Test FCM collection (for debugging/testing FCM functions)
    match /test_fcm/{testId} {
      allow read, write: if isAuthenticated() && isAppCheckValid();
    }
  }
}
